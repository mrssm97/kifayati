import { jsxs as f, jsx as o } from "react/jsx-runtime";
import d from "react";
import { styled as S } from "@mui/material/styles";
import D from "@mui/icons-material/AttachFile";
import L from "@mui/icons-material/Close";
import k from "@mui/material/IconButton";
import B from "@mui/material/InputAdornment";
import Y from "@mui/material/TextField";
import $ from "@mui/material/Typography";
const R = [
  "B",
  "kB",
  "MB",
  "GB",
  "TB",
  "PB",
  "EB",
  "ZB",
  "YB"
], U = [
  "B",
  "KiB",
  "MiB",
  "GiB",
  "TiB",
  "PiB",
  "EiB",
  "ZiB",
  "YiB"
], G = [
  "b",
  "kbit",
  "Mbit",
  "Gbit",
  "Tbit",
  "Pbit",
  "Ebit",
  "Zbit",
  "Ybit"
], Z = [
  "b",
  "kibit",
  "Mibit",
  "Gibit",
  "Tibit",
  "Pibit",
  "Eibit",
  "Zibit",
  "Yibit"
], b = (i, e, t) => {
  let n = i;
  return typeof e == "string" || Array.isArray(e) ? n = i.toLocaleString(e, t) : (e === !0 || t !== void 0) && (n = i.toLocaleString(void 0, t)), n;
};
function A(i, e) {
  if (!Number.isFinite(i))
    throw new TypeError(`Expected a finite number, got ${typeof i}: ${i}`);
  e = {
    bits: !1,
    binary: !1,
    space: !0,
    ...e
  };
  const t = e.bits ? e.binary ? Z : G : e.binary ? U : R, n = e.space ? " " : "";
  if (e.signed && i === 0)
    return ` 0${n}${t[0]}`;
  const l = i < 0, s = l ? "-" : e.signed ? "+" : "";
  l && (i = -i);
  let r;
  if (e.minimumFractionDigits !== void 0 && (r = { minimumFractionDigits: e.minimumFractionDigits }), e.maximumFractionDigits !== void 0 && (r = { maximumFractionDigits: e.maximumFractionDigits, ...r }), i < 1) {
    const p = b(i, e.locale, r);
    return s + p + n + t[0];
  }
  const c = Math.min(Math.floor(e.binary ? Math.log(i) / Math.log(1024) : Math.log10(i) / 3), t.length - 1);
  i /= (e.binary ? 1024 : 1e3) ** c, r || (i = i.toPrecision(3));
  const m = b(Number(i), e.locale, r), u = t[c];
  return s + m + n + u;
}
const _ = S("label")`
  position: relative;
  flex-grow: 1;

  input {
    opacity: 0 !important;
  }

  & > span {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    z-index: 2;
    display: flex;
    align-items: center;
  }

  span.MuiFileInput-placeholder {
    color: gray;
  }
`, j = S("div")`
  display: flex;
  width: 100%;

  & > span {
    display: block;
  }

  & > span:first-of-type {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }

  & > span:last-of-type {
    flex-shrink: 0;
    display: block;
  }
`, M = {
  Label: _,
  Filename: j
}, O = d.forwardRef(
  (i, e) => {
    const { text: t, isPlaceholder: n, placeholder: l, ...s } = i, r = d.useId();
    return /* @__PURE__ */ f(M.Label, { htmlFor: r, children: [
      /* @__PURE__ */ o("input", { ...s, ref: e, id: r }),
      t ? /* @__PURE__ */ o(
        "span",
        {
          "aria-placeholder": l,
          className: n ? "MuiFileInput-placeholder" : "",
          children: typeof t == "string" ? t : /* @__PURE__ */ f(M.Filename, { children: [
            /* @__PURE__ */ o("span", { children: t.filename }),
            /* @__PURE__ */ f("span", { children: [
              ".",
              t.extension
            ] })
          ] })
        }
      ) : null
    ] });
  }
);
function W(i) {
  return i.length > 0;
}
function K(i) {
  return i.reduce((e, t) => e + t.size, 0);
}
function y(i) {
  return typeof window < "u" && i instanceof File;
}
function V(i) {
  return Array.from(i);
}
function q(i) {
  const t = (y(i) ? i.name : i[0]?.name || "").split("."), n = t.pop();
  return {
    filename: t.join("."),
    extension: n
  };
}
const H = (i, e) => {
  const {
    value: t,
    onChange: n,
    disabled: l,
    getInputText: s,
    getSizeText: r,
    placeholder: c,
    hideSizeText: m,
    inputProps: u,
    InputProps: p,
    multiple: g,
    className: P,
    ...N
  } = i, I = d.useRef(null), x = g || u?.multiple || p?.inputProps?.multiple || !1, w = () => {
    const a = I.current;
    a && (a.value = "");
  }, E = (a) => {
    const F = a.target.files, T = F ? V(F) : [];
    w(), n?.(x ? T : T[0]);
  }, v = (a) => {
    a.preventDefault(), !l && n?.(g ? [] : null);
  }, h = Array.isArray(t) ? W(t) : y(t), z = () => t === null || Array.isArray(t) && t.length === 0 ? c || "" : typeof s == "function" && t !== void 0 ? s(t) : t && h ? Array.isArray(t) && t.length > 1 ? `${t.length} files` : q(t) : "", C = () => {
    if (typeof r == "function" && t !== void 0)
      return r(t);
    if (h) {
      if (Array.isArray(t)) {
        const a = K(t);
        return A(a);
      }
      if (y(t))
        return A(t.size);
    }
    return "";
  };
  return /* @__PURE__ */ o(
    Y,
    {
      ref: e,
      type: "file",
      disabled: l,
      onChange: E,
      className: `MuiFileInput-TextField ${P || ""}`,
      InputProps: {
        startAdornment: /* @__PURE__ */ o(B, { position: "start", children: /* @__PURE__ */ o(D, {}) }),
        endAdornment: /* @__PURE__ */ f(
          B,
          {
            position: "end",
            style: { visibility: h ? "visible" : "hidden" },
            children: [
              m ? null : /* @__PURE__ */ o(
                $,
                {
                  variant: "caption",
                  mr: "2px",
                  className: "MuiFileInput-Typography-size-text",
                  children: C()
                }
              ),
              /* @__PURE__ */ o(
                k,
                {
                  "aria-label": "Clear",
                  title: "Clear",
                  size: "small",
                  disabled: l,
                  className: "MuiFileInput-IconButton",
                  onClick: v,
                  children: /* @__PURE__ */ o(L, { fontSize: "small" })
                }
              )
            ]
          }
        ),
        ...p,
        inputProps: {
          text: z(),
          multiple: x,
          isPlaceholder: t === null || Array.isArray(t) && t.length === 0,
          ref: I,
          placeholder: c,
          ...u,
          ...p?.inputProps
        },
        // @ts-ignore
        inputComponent: O
      },
      ...N
    }
  );
}, ot = d.forwardRef(H);
export {
  ot as MuiFileInput
};
